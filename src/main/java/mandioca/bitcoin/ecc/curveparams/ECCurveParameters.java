package mandioca.bitcoin.ecc.curveparams;

import java.math.BigInteger;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;

import static mandioca.bitcoin.ecc.curveparams.Secp256k1CurveParameters.SECP256K1_PARAMETERS;

/**
 * Provides basic parameters for supported elliptic curves.
 */
public final class ECCurveParameters {

    private static final Function<EllipticCurveName, Map<String, Object>> curveMap = (c) -> {
        //noinspection SwitchStatementWithTooFewBranches
        switch (c) {
            case SECP256K1:
                return SECP256K1_PARAMETERS;
            default:
                throw new IllegalArgumentException("Unknown ec algorithm name " + c.name());
        }
    };
    // Provided in case something needs static access to curve parameters, after more curves are supported.
    @SuppressWarnings("unused")
    public static final BiFunction<EllipticCurveName, STRING_PARAM, String> stringParam = (c, p) -> {
        Map<String, Object> paramMap = curveMap.apply(c);
        switch (p) {
            case NAME:
                return (String) paramMap.get("name");
            case EQUATION:
                return (String) paramMap.get("equation");
            default:
                throw new IllegalArgumentException("Unknown ec parameter name " + p.name());
        }
    };
    // Provided in case something needs static access to curve parameters, after more curves are supported.
    @SuppressWarnings("unused")
    public static final BiFunction<EllipticCurveName, INT_PARAM, BigInteger> intParam = (c, p) -> {
        Map<String, Object> paramMap = curveMap.apply(c);
        switch (p) {
            case A:
                return (BigInteger) paramMap.get("a");
            case B:
                return (BigInteger) paramMap.get("b");
            case P:
                return (BigInteger) paramMap.get("p");
            case GX:
                return (BigInteger) paramMap.get("Gx");
            case GY:
                return (BigInteger) paramMap.get("Gy");
            case N:
                return (BigInteger) paramMap.get("n");
            default:
                throw new IllegalArgumentException("Unknown ec parameter name " + p.name());
        }
    };

    private final String curveName;
    private final String equation;
    private final BigInteger a;
    private final BigInteger b;
    private final BigInteger p;
    private final BigInteger gx;
    private final BigInteger gy;
    private final BigInteger n;

    public ECCurveParameters(EllipticCurveName curveName) {
        Map<String, Object> parameterMap = curveMap.apply(curveName);
        this.curveName = (String) parameterMap.get("name");
        this.equation = (String) parameterMap.get("equation");
        this.a = (BigInteger) parameterMap.get("a");
        this.b = (BigInteger) parameterMap.get("b");
        this.p = (BigInteger) parameterMap.get("p");
        this.gx = (BigInteger) parameterMap.get("Gx");
        this.gy = (BigInteger) parameterMap.get("Gy");
        this.n = (BigInteger) parameterMap.get("n");
    }

    public String getCurveName() {
        return curveName;
    }

    public String getEquation() {
        return equation;
    }

    public BigInteger getA() {
        return a;
    }

    public BigInteger getB() {
        return b;
    }

    public BigInteger getP() {
        return p;
    }

    public BigInteger getGx() {
        return gx;
    }

    public BigInteger getGy() {
        return gy;
    }

    public BigInteger getN() {
        return n;
    }

    public enum STRING_PARAM {
        NAME,
        EQUATION,
    }

    public enum INT_PARAM {
        A,  // elliptic curve constant a
        B,  // elliptic curve constant b
        P,  // Field order = p, where p is prime
        GX, // X-coordinate of a curve's generator point G
        GY, // Y-coordinate of a curve's generator point G
        N   // Order of a group generated by G in curve, where N*G = 0
    }
}
