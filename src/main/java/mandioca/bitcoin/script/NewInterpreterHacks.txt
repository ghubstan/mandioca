       // From programmingbitcoin/code-ch13/script.py
                // # p2sh rule. if the next three cmds are:
                //      # OP_HASH160 <20 byte hash> OP_EQUAL this is the RedeemScript
                //          # OP_HASH160 == 0xa9 and OP_EQUAL == 0x87
                //  if len(cmds) == 3 and cmds[0] == 0xa9 and type(cmds[1]) == bytes and len(cmds[1]) == 20 and cmds[2] == 0x87:
                //                    redeem_script = encode_varint(len(cmd)) + cmd
                //                    # we execute the next three opcodes
                //                    cmds.pop()
                //                    h160 = cmds.pop()
                //                    cmds.pop()
                //                    if not op_hash160(stack):
                //                        return False
                //                    stack.append(h160)
                //                    if not op_equal(stack):
                //                        return False
                //                    # final result should be a 1
                //                    if not op_verify(stack):
                //                        LOGGER.info('bad p2sh h160')
                //                        return False
                //                    # hashes match! now add the RedeemScript
                //                    redeem_script = encode_varint(len(cmd)) + cmd
                //                    stream = BytesIO(redeem_script)
                //                    cmds.extend(Script.parse(stream).cmds)
                if (cmdStack.size() == 3) {
                    System.err.println("P2SH rule?");
                }

                //  # witness program version 0 rule. if stack cmds are:
                //                # 0 <20 byte hash> this is p2wpkh
                //                # tag::source3[]
                //                if len(stack) == 2 and stack[0] == b'' and len(stack[1]) == 20:  # <1>
                //                    h160 = stack.pop()
                //                    stack.pop()
                //                    cmds.extend(witness)
                //                    cmds.extend(p2pkh_script(h160).cmds)
                //                  # end::source3[]
                if (mainStack().size() == 2) {
                    System.err.println("Witness program version 0 rule for p2wpkh?");
                }

                // # witness program version 0 rule. if stack cmds are:
                //                # 0 <32 byte hash> this is p2wsh
                //                # tag::source6[]
                //                if len(stack) == 2 and stack[0] == b'' and len(stack[1]) == 32:
                //                    s256 = stack.pop()  # <1>
                //                    stack.pop()  # <2>
                //                    cmds.extend(witness[:-1])  # <3>
                //                    witness_script = witness[-1]  # <4>
                //                    if s256 != sha256(witness_script):  # <5>
                //                        print('bad sha256 {} vs {}'.format
                //                            (s256.hex(), sha256(witness_script).hex()))
                //                        return False
                //                    stream = BytesIO(encode_varint(len(witness_script))
                //                        + witness_script)
                //                    witness_script_cmds = Script.parse(stream).cmds  # <6>
                //                    cmds.extend(witness_script_cmds)
                //                # end::source6[]
                if (mainStack().size() == 2 && mainStack().search(ENC_0) == 0) { // & len(stack[1]) == 32  (HOW?)
                    System.err.println("Witness program version 0 rule for p2wsh?");
                }
